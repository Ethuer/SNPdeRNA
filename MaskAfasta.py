import csv
from Bio import SeqIO
import sys,argparse
import os.path
from Bio.Alphabet import IUPAC


# This script takes a vcf file format, and silences fastas, by introducing 'N's
parser = argparse.ArgumentParser(description='Mask a fasta to remove sequence error ')


parser.add_argument('-vcf',
                    dest='vcf',
                    required = True,
                    help='Input a SNP calling vcf file , preferrably generated by SNP2Quant',
                    metavar = 'FILE',
                    #type=lambda x: is_valid_file(parser,x)
                    )


parser.add_argument('-fasta',
                    dest='fasta',
                    required = True,
                    help='input a fasta file, used as a reference for the initial mapping',
                    metavar = 'FILE',
                    #type=lambda x: is_valid_file(parser,x)
                    )


parser.add_argument('-out',
                    dest='output',
                    required = True,
                    help='output a Fasta file, with "N" replacing the SNPs in the reference. Output in fasta format',
                    metavar = 'FILE',
                    #type=lambda x: is_valid_file(parser,x)
                    )

args = parser.parse_args()

with open('%s' %(args.vcf),'r') as vcf_raw, open('%s' %(args.output),'w') as out_raw:
    vcffile = csv.reader(vcf_raw, delimiter ='\t')
    
    record_dict = SeqIO.index('%s' %(args.fasta), "fasta")
    
    vcfDict = {}
    fastaDict = {}
    # QUAL cutoff 20,  make flexible
    for row in vcffile:
        if not '#' in row[0]:   
        # Chromosome, position as keys
        # REF ALT and Quality as values
            vcfDict[row[0],row[1]] = [row[3],row[4],row[5]]

##    print len(vcfDict)

##    f

    # make the sequence mutable
    for elements, values in record_dict.items():
        seq_mutable = values.seq.tomutable()
        fastaDict[elements] = seq_mutable
        
##    print len(fastaDict)
##        
    for element, values in vcfDict.items():
##        print element[1]
##        print record_dict[element[0]].seq[int(element[1])], values[0], values[1]
        fastaDict[element[0]][int(element[1])] = 'N'

##    out_seqs = {}
    for element, value in fastaDict.items():
##        value.id = element
        out_seqs = SeqIO.SeqRecord((value), id = element)
        SeqIO.write(out_seqs, out_raw, "fasta")
            
##output_handle = open("example.fasta", "w")
    
##output_handle.close()
